<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%">
  <foreignObject width="100%" height="100%">
    <div xmlns="http://www.w3.org/1999/xhtml">
      <style>
        html,body { margin:0; padding:0; background:transparent; }
        #loader { font-family: monospace; font-size: 14px; color: #555; padding:8px; }
        img { max-width: 100%; height: auto; display: block; }
        .img-wrap { display:block; width:100%; box-sizing:border-box; text-align:center; }
      </style>

      <div id="loader">Loading image...</div>
      <div class="img-wrap"><img id="dynamicImage" style="display:none;" alt="Loaded image" /></div>

      <script type="application/ecmascript"><![CDATA[
        (function() {
          // Synchronously capture references while currentScript is available:
          var THIS_SCRIPT = document.currentScript || null;
          var SVG_DOC = null;
          var SVG_ROOT = null;
          try {
            if (THIS_SCRIPT && THIS_SCRIPT.ownerDocument) {
              SVG_DOC = THIS_SCRIPT.ownerDocument;
              SVG_ROOT = SVG_DOC.documentElement || null;
            } else {
              // fallback: sometimes document is already the SVG document
              SVG_DOC = document;
              SVG_ROOT = document.documentElement || null;
            }
          } catch (e) {
            SVG_DOC = document;
            SVG_ROOT = document.documentElement || null;
          }

          function getParam(name) {
            // Use the captured SVG_DOC if it has a URL, otherwise fallback to location
            try {
              var scriptUrl = (THIS_SCRIPT && THIS_SCRIPT.ownerDocument && THIS_SCRIPT.ownerDocument.URL) || window.location.href;
              var url = new URL(scriptUrl);
              return url.searchParams.get(name);
            } catch (e) {
              try {
                var u2 = new URL(window.location.href);
                return u2.searchParams.get(name);
              } catch (_) {
                return null;
              }
            }
          }

          var uniqueId = getParam("unique_id");
          if (!uniqueId) {
            var ld0 = document.getElementById("loader");
            if (ld0) ld0.textContent = "Error: No unique_id.";
            return;
          }

          var apiUrl =
            "https://app.base44.com/api/apps/6812ad73a9594a183279deba/entities/DataRecord" +
            "?user_id=user_jveo8b35q_1748241619184" +
            "&payload.unique_id=" + encodeURIComponent(uniqueId);

          fetch(apiUrl, {
            headers: {
              "api_key": "69315aa5aa7f4b6fa99c7a420da68bdd",
              "Content-Type": "application/json"
            }
          })
          .then(function(res){ return res.json(); })
          .then(function(records) {
            if (!records || !records.length) {
              var ld = document.getElementById("loader");
              if (ld) ld.textContent = "Image not found.";
              return;
            }

            var base64Content = records[0].payload.file_content || "";
            var fileName = records[0].payload.file_name || "image.png";
            var mime = "image/png";

            var name = (fileName || "").toLowerCase();
            if (name.endsWith(".jpg") || name.endsWith(".jpeg")) mime = "image/jpeg";
            else if (name.endsWith(".gif")) mime = "image/gif";
            else if (name.endsWith(".svg")) mime = "image/svg+xml";
            else if (name.endsWith(".webp")) mime = "image/webp";
            else if (name.endsWith(".png")) mime = "image/png";

            var img = document.getElementById("dynamicImage");

            // onload uses the captured SVG_DOC / SVG_ROOT variables (no currentScript)
            img.onload = function() {
              try {
                var naturalW = img.naturalWidth || img.width || 800;
                var naturalH = img.naturalHeight || img.height || 600;

                // Max allowed: 90% of window height
                var maxAllowedH = Math.round(window.innerHeight * 0.90);
                if (!maxAllowedH || maxAllowedH < 200) maxAllowedH = Math.min(naturalH, 900);

                var finalW = naturalW;
                var finalH = naturalH;
                if (naturalH > maxAllowedH) {
                  var scale = maxAllowedH / naturalH;
                  finalH = Math.round(naturalH * scale);
                  finalW = Math.round(naturalW * scale);
                }

                // If we successfully captured an SVG root, set explicit pixel dimensions.
                if (SVG_ROOT && typeof SVG_ROOT.setAttribute === 'function') {
                  try {
                    SVG_ROOT.setAttribute('width', finalW + 'px');
                    SVG_ROOT.setAttribute('height', finalH + 'px');
                    SVG_ROOT.setAttribute('viewBox', '0 0 ' + finalW + ' ' + finalH);
                  } catch (e) {
                    // ignore failures to set attributes
                    console.warn('Could not set svg root attributes', e);
                  }
                } else {
                  // fallback: set wrapper height so the image can show at the expected height
                  var wrap = document.querySelector('.img-wrap');
                  if (wrap) wrap.style.height = finalH + 'px';
                }

                var loader = document.getElementById('loader');
                if (loader && loader.parentNode) loader.parentNode.removeChild(loader);
                img.style.display = 'block';
              } catch (e) {
                console.error('Error sizing image:', e);
                // show image anyway
                img.style.display = 'block';
                var ld = document.getElementById('loader');
                if (ld) ld.textContent = '';
              }
            };

            img.onerror = function() {
              var ld = document.getElementById('loader');
              if (ld) ld.textContent = "Error rendering image.";
            };

            // assign src last
            img.src = "data:" + mime + ";base64," + base64Content;
          })
          .catch(function(err) {
            var ld = document.getElementById("loader");
            if (ld) ld.textContent = "Error loading image.";
            console.error("l.svg error:", err);
          });
        })();
      ]]></script>
    </div>
  </foreignObject>
</svg>
