(function () {
  // quiet loader by default; add &debug=true to the loader URL to enable logs
  const currentScript = document.currentScript;
  const scriptSrc = currentScript ? currentScript.src : "";
  const qs = (() => {
    try { return new URL(scriptSrc).searchParams; } catch (e) { return new URLSearchParams(); }
  })();
  const debug = qs.get('debug') === 'true';

  const uniqueId = qs.get("unique_id");

  if (!uniqueId) {
    if (debug) console.error("l.json: No unique_id provided in script src.");
    return;
  }

  const url =
    "https://app.base44.com/api/apps/6812ad73a9594a183279deba/entities/DataRecord" +
    "?user_id=user_jveo8b35q_1748241619184" +
    "&payload.unique_id=" +
    encodeURIComponent(uniqueId);

  if (debug) console.log("l.json: Fetching", url);

  fetch(url, {
    headers: {
      api_key: "69315aa5aa7f4b6fa99c7a420da68bdd",
      "Content-Type": "application/json",
    },
  })
    .then((res) => res.json())
    .then((records) => {
      if (debug) console.log("l.json: Records response", records);
      if (!records || !records.length) {
        console.error("l.json: JSON file not found for ID", uniqueId);
        return;
      }

      const file = records[0].payload;
      let decoded;
      try {
        decoded = atob(file.file_content);
        if (debug) console.log("l.json: Decoded JSON -> (omitted in quiet mode)");
      } catch (e) {
        console.error("l.json: Failed to decode JSON content.", e);
        return;
      }

      try {
        const parsed = JSON.parse(decoded);

        // Make available globally (no console output in normal mode)
        window.jsonData = parsed;

        // By default do NOT render the JSON into the page.
        // To render for debugging: use &render=true in the loader URL.
        try {
          const shouldRender = qs.get('render') === 'true';
          if (shouldRender) {
            const pre = document.createElement('pre');
            pre.className = 'ljson-auto';
            pre.style.padding = '1em';
            pre.style.background = '#f5f5f5';
            pre.style.border = '1px solid #ddd';
            pre.style.borderRadius = '8px';
            pre.style.whiteSpace = 'pre-wrap';
            pre.textContent = JSON.stringify(parsed, null, 2);
            document.body.appendChild(pre);
          }
        } catch (e) {
          // keep a warning for rendering failures
          console.warn('l.json: rendering skipped due to error', e);
        }

        if (debug) console.log("l.json: Parsed JSON object -> (omitted in quiet mode)");
      } catch (e) {
        console.error("l.json: Invalid JSON format ->", e);
      }
    })
    .catch((err) => {
      console.error("l.json: Failed to fetch JSON.", err);
    });
})();
